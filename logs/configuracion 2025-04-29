------------Ingresar un registro manualmente------------------------------
  import sys
import os
from datetime import datetime

# Agrega la ra√≠z del proyecto al path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from config import init_app, db
from flask import Flask
from modelo.loLogs import loLogs 
from modelo.asEmpresa import asEmpresa 

# Inicializa la aplicaci√≥n Flask
app = Flask(__name__)
init_app(app)

with app.app_context():
    try:
        # ‚úÖ Insertar nuevo registro en la tabla lo_logs
        nuevo_log = loLogs(
            idEmpresa=1,
            operador=101,
            fechaCreacion=datetime.utcnow(),
            estado='ACTIVO',
            nivel='INFO',
            componente='SistemaDeinformatica',
            hilo='Thread-1',
            mensaje='Inicio de sesi√≥n exitoso.',
            categoria='Autenticaci√≥n',
            ocurrencias=1,
            respuestaOpenai=None
        )

        db.session.add(nuevo_log)
        db.session.commit()
        print("‚úÖ Registro insertado correctamente.")

        # üîç Consultar todos los registros de lo_logs
        logs = loLogs.query.all()
        if logs:
            print("‚úÖ Registros encontrados:", len(logs))
            for log in logs:
                print(f"ID: {log.idLogAplicacion}, IdEmpresa: {log.idEmpresa}, Operador: {log.operador}, "
                      f"Estado: {log.estado}, Componente: {log.componente}, Mensaje: {log.mensaje}, "
                      f"Nivel: {log.nivel}, Fecha: {log.fechaCreacion}")
        else:
            print("‚ùå No se encontraron registros en la base de datos.")

    except Exception as e:
        print("‚ùå Error al interactuar con la base de datos:", e)




----------------------------filtro final sin subir a la base de datos-----------------------------------------------
import re
from collections import defaultdict

# === Configuraciones ===
PRIORIDAD = ['ERROR', 'WARN', 'INFO', 'DEBUG', 'UNKNOWN']

CATEGORIAS = {
    'start_send': re.compile(r'inicia envio', re.IGNORECASE),
    'end_send': re.compile(r'fin envio', re.IGNORECASE),
    'ftp_error': re.compile(r'FTP.*ERROR', re.IGNORECASE),
    'general_error': re.compile(r'ERROR', re.IGNORECASE),
}

def es_inicio_log(linea: str) -> bool:
    return bool(re.match(r"\d{2}:\d{2}:\d{2},\d{3}", linea))

def extraer_componente(linea: str) -> str:
    match = re.search(r'\b(?:ERROR|WARN|INFO|DEBUG)\s+\[([^\]]+)\]', linea)
    return match.group(1).strip() if match else "desconocido"

def extraer_hilo(linea: str) -> str:
    match = re.search(r'\(([^)]+)\)', linea)
    return match.group(1).strip() if match else "main"

def extraer_nivel(linea: str) -> str:
    niveles = ['ERROR', 'WARN', 'INFO', 'DEBUG']
    for nivel in niveles:
        if f' {nivel} ' in linea:
            return nivel
    return 'UNKNOWN'

def categorizar_mensaje(texto: str) -> str:
    for categoria, patron in CATEGORIAS.items():
        if patron.search(texto):
            return categoria
    return 'otros'

def categorizar_logs(texto: str) -> str:
    for categoria, patron in CATEGORIAS.items():
        if patron.search(texto):
            return categoria
            return 'otros'

def limitar_longitud(texto: str, max_len=30000):
    return texto if len(texto) <= max_len else texto[:max_len] + '...'

def prioridad_nivel(nivel):
    return PRIORIDAD.index(nivel) if nivel in PRIORIDAD else len(PRIORIDAD)

# === Filtro 1 ===
def extraer_bloques_log(input_path: str, output_path: str) -> None:
    with open(input_path, 'r', encoding='utf-8') as file_in, \
         open(output_path, 'w', encoding='utf-8') as file_out:
        
        bloque = []
        en_bloque = False
        numero_linea = 0
        linea_inicio = None

        for linea in file_in:
            numero_linea += 1
            if es_inicio_log(linea):
                if en_bloque:
                    file_out.write(f"# Bloque encontrado en la l√≠nea {linea_inicio}\n")
                    file_out.write("".join(bloque) + "\n\n")
                bloque = [linea]
                en_bloque = True
                linea_inicio = numero_linea
            elif en_bloque:
                if linea.startswith(("   ", "\t", "at ")):
                    bloque.append(linea)
                else:
                    file_out.write(f"# Bloque encontrado en la l√≠nea {linea_inicio}\n")
                    file_out.write("".join(bloque) + "\n\n")
                    en_bloque = False
                    bloque = []

        if en_bloque:
            file_out.write(f"# Bloque encontrado en la l√≠nea {linea_inicio}\n")
            file_out.write("".join(bloque) + "\n\n")

# === Filtro 2 ===
def generar_reporte_logs(input_path: str, output_path: str) -> None:
    reporte = defaultdict(lambda: {
        'count': 0,
        'lineas': [],
        'nivel': '',
        'categoria': '',
        'componente': '',
        'hilo': '',
        'mensaje': ''
    })

    with open(input_path, 'r', encoding='utf-8') as file:
        lineas = file.readlines()

        bloque_actual = []
        for i, linea in enumerate(lineas, 1):
            match = re.match(r'# Bloque encontrado en la l√≠nea (\d+)', linea.strip())
            if match:
                if bloque_actual:
                    procesar_bloque(bloque_actual, match.group(1), reporte)
                bloque_actual = []
            elif not linea.strip().startswith("#"):
                bloque_actual.append(linea)

        if bloque_actual:
            procesar_bloque(bloque_actual, str(len(lineas)), reporte)

    with open(output_path, 'w', encoding='utf-8') as file:
        for (_, _, _), datos in sorted(
            reporte.items(), 
            key=lambda x: (prioridad_nivel(x[1]['nivel']), -x[1]['count'])
        ):
            file.write(f"=== {datos['mensaje']} ===\n")
            file.write(f"Nivel: {datos['nivel']} | Categor√≠a: {datos['categoria']}\n")
            file.write(f"Componente: {datos['componente']} | Hilo: {datos['hilo']}\n")
            file.write(f"Total: {datos['count']} ocurrencias\n")
            file.write("\nL√≠neas:\n- " + ", ".join(datos['lineas']) + "\n\n")

def procesar_bloque(bloque_actual, linea_inicio, reporte):
    mensaje_completo = "".join(bloque_actual).strip()
    nivel = extraer_nivel(mensaje_completo)
    categoria = categorizar_mensaje(mensaje_completo)
    componente = extraer_componente(mensaje_completo)
    hilo = extraer_hilo(mensaje_completo)

    mensaje_normalizado = re.sub(r'\d{2}:\d{2}:\d{2},\d{3}.*?\]', '', mensaje_completo).strip()
    
    if "FTP MKDIR" in mensaje_normalizado:
        mensaje_normalizado = re.sub(r'FTP MKDIR.*?ERROR', 'FTP MKDIR [DIRECTORIO] ERROR', mensaje_normalizado)

    clave = (nivel, categoria, mensaje_normalizado)
    reporte[clave].update({
        'count': reporte[clave]['count'] + 1,
        'lineas': reporte[clave]['lineas'] + [linea_inicio],
        'nivel': nivel,
        'categoria': categoria,
        'componente': componente,
        'hilo': hilo,
        'mensaje': mensaje_completo
    })

# ----------------------------
# Ejecuci√≥n (Flujo principal)
# ----------------------------
if __name__ == "__main__":
    input_original = "C:/Users/klever.robalino/Desktop/Proyecto-Mutualista/backend-asistente/agentes/logs/logs_files/prueba.txt"
    output_filtro1 = "C:/Users/klever.robalino/Desktop/Proyecto-Mutualista/backend-asistente/agentes/logs/logs_files/filtro1_bloques.txt"
    output_filtro2 = "C:/Users/klever.robalino/Desktop/Proyecto-Mutualista/backend-asistente/agentes/logs/logs_files/filtro2_reporte.txt"

    extraer_bloques_log(input_original, output_filtro1)
    generar_reporte_logs(output_filtro1, output_filtro2)

    print("‚úÖ Proceso completo:")
    print(f"- Bloques de log extra√≠dos en: {output_filtro1}")
    print(f"- Reporte agrupado generado en: {output_filtro2}")



--------------filtro final subido a la base de datos--------------------------
import re
from collections import defaultdict
from insertar import Logger

# === Configuraciones ===
PRIORIDAD = ['ERROR', 'WARN', 'INFO', 'DEBUG', 'UNKNOWN']

CATEGORIAS = {
    'start_send': re.compile(r'inicia envio', re.IGNORECASE),
    'end_send': re.compile(r'fin envio', re.IGNORECASE),
    'ftp_error': re.compile(r'FTP.*ERROR', re.IGNORECASE),
    'general_error': re.compile(r'ERROR', re.IGNORECASE),
}

def es_inicio_log(linea: str) -> bool:
    return bool(re.match(r"\d{2}:\d{2}:\d{2},\d{3}", linea))

def extraer_componente(linea: str) -> str:
    match = re.search(r'\b(?:ERROR|WARN|INFO|DEBUG)\s+\[([^\]]+)\]', linea)
    return match.group(1).strip() if match else "desconocido"

def extraer_hilo(linea: str) -> str:
    match = re.search(r'\(([^)]+)\)', linea)
    return match.group(1).strip() if match else "main"

def extraer_nivel(linea: str) -> str:
    niveles = ['ERROR', 'WARN', 'INFO', 'DEBUG']
    for nivel in niveles:
        if f' {nivel} ' in linea:
            return nivel
    return 'UNKNOWN'

def categorizar_mensaje(texto: str) -> str:
    for categoria, patron in CATEGORIAS.items():
        if patron.search(texto):
            return categoria
    return 'otros'

def limitar_longitud(texto: str, max_len=30000):
    return texto if len(texto) <= max_len else texto[:max_len] + '...'

def prioridad_nivel(nivel):
    return PRIORIDAD.index(nivel) if nivel in PRIORIDAD else len(PRIORIDAD)

# === Filtro 1 ===
def extraer_bloques_log(input_path: str, output_path: str) -> None:
    with open(input_path, 'r', encoding='utf-8') as file_in, \
         open(output_path, 'w', encoding='utf-8') as file_out:
        
        bloque = []
        en_bloque = False
        numero_linea = 0
        linea_inicio = None

        for linea in file_in:
            numero_linea += 1
            if es_inicio_log(linea):
                if en_bloque:
                    file_out.write(f"# Bloque encontrado en la l√≠nea {linea_inicio}\n")
                    file_out.write("".join(bloque) + "\n\n")
                bloque = [linea]
                en_bloque = True
                linea_inicio = numero_linea
            elif en_bloque:
                if linea.startswith(("   ", "\t", "at ")):
                    bloque.append(linea)
                else:
                    file_out.write(f"# Bloque encontrado en la l√≠nea {linea_inicio}\n")
                    file_out.write("".join(bloque) + "\n\n")
                    en_bloque = False
                    bloque = []

        if en_bloque:
            file_out.write(f"# Bloque encontrado en la l√≠nea {linea_inicio}\n")
            file_out.write("".join(bloque) + "\n\n")

# === Filtro 2 ===
def generar_reporte_logs(input_path: str, output_path: str) -> None:
    reporte = defaultdict(lambda: {
        'count': 0,
        'lineas': [],
        'nivel': '',
        'categoria': '',
        'componente': '',
        'hilo': '',
        'mensaje': ''
    })

    with open(input_path, 'r', encoding='utf-8') as file:
        lineas = file.readlines()

        bloque_actual = []
        for i, linea in enumerate(lineas, 1):
            match = re.match(r'# Bloque encontrado en la l√≠nea (\d+)', linea.strip())
            if match:
                if bloque_actual:
                    procesar_bloque(bloque_actual, match.group(1), reporte)
                bloque_actual = []
            elif not linea.strip().startswith("#"):
                bloque_actual.append(linea)

        if bloque_actual:
            procesar_bloque(bloque_actual, str(len(lineas)), reporte)

    # Insertar en BD solo los logs agrupados del reporte final
    insertar_logs_a_bd(reporte)

    with open(output_path, 'w', encoding='utf-8') as file:
        for (_, _, _), datos in sorted(
            reporte.items(), 
            key=lambda x: (prioridad_nivel(x[1]['nivel']), -x[1]['count'])
        ):
            file.write(f"=== {datos['mensaje']} ===\n")
            file.write(f"Nivel: {datos['nivel']} | Categor√≠a: {datos['categoria']}\n")
            file.write(f"Componente: {datos['componente']} | Hilo: {datos['hilo']}\n")
            file.write(f"Total: {datos['count']} ocurrencias\n")
            file.write("\nL√≠neas:\n- " + ", ".join(datos['lineas']) + "\n\n")

# ... (todo el c√≥digo anterior se mantiene igual)

def insertar_logs_a_bd(reporte):
    """Inserta en la BD solo los logs agrupados del reporte final"""
    for (nivel, categoria, mensaje), datos in reporte.items():
        # Preparamos el mensaje de l√≠neas
        lineas_msg = f"Ocurrencias en l√≠neas: {', '.join(datos['lineas'])}"
        mensaje_completo = f"{mensaje}\n{lineas_msg}"
        
        Logger.insertar_log(
            idEmpresa=1,
            operador=0,  # 0 para procesos autom√°ticos
            mensaje=limitar_longitud(mensaje_completo),
            nivel=nivel,
            componente=datos['componente'],
            hilo=datos['hilo'],
            categoria=categoria,
            estado='ACTIVO',
            lineas=datos['lineas'],  # Pasamos el array de l√≠neas
            ocurrencias=datos['count']  # Pasamos el total de ocurrencias
        )

# ... (el resto del c√≥digo se mantiene igual)

def procesar_bloque(bloque_actual, linea_inicio, reporte):
    mensaje_completo = "".join(bloque_actual).strip()
    nivel = extraer_nivel(mensaje_completo)
    categoria = categorizar_mensaje(mensaje_completo)
    componente = extraer_componente(mensaje_completo)
    hilo = extraer_hilo(mensaje_completo)

    mensaje_normalizado = re.sub(r'\d{2}:\d{2}:\d{2},\d{3}.*?\]', '', mensaje_completo).strip()
    
    if "FTP MKDIR" in mensaje_normalizado:
        mensaje_normalizado = re.sub(r'FTP MKDIR.*?ERROR', 'FTP MKDIR [DIRECTORIO] ERROR', mensaje_normalizado)

    clave = (nivel, categoria, mensaje_normalizado)
    reporte[clave].update({
        'count': reporte[clave]['count'] + 1,
        'lineas': reporte[clave]['lineas'] + [linea_inicio],
        'nivel': nivel,
        'categoria': categoria,
        'componente': componente,
        'hilo': hilo,
        'mensaje': mensaje_completo
    })

# ----------------------------
# Ejecuci√≥n (Flujo principal)
# ----------------------------
if __name__ == "__main__":
    input_original = "C:/Users/klever.robalino/Desktop/Proyecto-Mutualista/backend-asistente/agentes/logs/logs_files/prueba.txt"
    output_filtro1 = "C:/Users/klever.robalino/Desktop/Proyecto-Mutualista/backend-asistente/agentes/logs/logs_files/filtro1_bloques.txt"
    output_filtro2 = "C:/Users/klever.robalino/Desktop/Proyecto-Mutualista/backend-asistente/agentes/logs/logs_files/filtro2_reporte.txt"

    extraer_bloques_log(input_original, output_filtro1)
    generar_reporte_logs(output_filtro1, output_filtro2)

    print("‚úÖ Proceso completo:")
    print(f"- Bloques de log extra√≠dos en: {output_filtro1}")
    print(f"- Reporte agrupado generado en: {output_filtro2}")
    print("- Todos los logs relevantes han sido insertados en la base de datos")
