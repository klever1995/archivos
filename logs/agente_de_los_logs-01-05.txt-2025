--------------------------------------con este ya funcionaba------------------------------------------
# En cualquier archivo de tu proyecto
import os
import sys
os.environ['NO_PROXY'] = 'recursoazureopenaimupi.openai.azure.com'
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from consumos.consulta_ia_openai import Consulta_ia_openai

# Crear instancia (ya tiene la API key configurada internamente)
consulta = Consulta_ia_openai()

# Uso directo del nuevo m√©todo
texto_input = "Expl√≠came c√≥mo solucionar un error 503 en el servidor"
respuesta = consulta.respuesta_rapida(texto_input)

print(respuesta)

----------------------los dos metodos que use de pruebas--------------------------------------------------
#Interpretaci√≥n de logs
    def interpretar_logs(self, texto_logs):

        if not self.client:
            return "Error: Cliente no inicializado"
            
        try:
            response = self.client.chat.completions.create(
                model=self.model_name,
                messages=[
                    {"role": "system", "content": "Eres un t√©cnico experto en servidores. Analiza estos logs, identifica errores y provee soluciones concretas en m√°ximo 3 pasos. S√© t√©cnico y directo."},
                    {"role": "user", "content": texto_logs}
                ],
                temperature=0.3,
                max_tokens=500  # Reducido para respuestas m√°s concisas
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            logging.error(f"Error en interpretar_logs: {e}")
            return f"Error al procesar los logs: {e}"
        
    def respuesta_rapida(self, texto):
        if not self.client:
            return "Error: Cliente no inicializado"
            
        try:
            response = self.client.chat.completions.create(
                model=self.model_name,
                messages=[
                    {"role": "system", "content": "Responde de manera concisa y √∫til"},
                    {"role": "user", "content": texto}
                ],
                temperature=0.3,
                max_tokens=500
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            logging.error(f"Error en respuesta_rapida: {e}")
            return f"Error al procesar la solicitud: {e}"


-------------------esta es la de los logs-------------------------------
# En cualquier archivo de tu proyecto
import os
import sys
os.environ['NO_PROXY'] = 'recursoazureopenaimupi.openai.azure.com'
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from consumos.consulta_ia_openai import Consulta_ia_openai

# Crear instancia (ya tiene la API key configurada internamente)
consulta = Consulta_ia_openai()

# Ejemplo de uso con logs reales
log_error = """
2023-11-15 14:30:22 [ERROR] [nginx] 502 Bad Gateway
upstream prematurely closed connection while reading response header
"""

respuesta = consulta.interpretar_logs(log_error)
print(respuesta)



-----------------------nuevo filtro con acceso ya a openai------------------------------------
import os
import sys
import re
from collections import defaultdict
from insertar import Logger

os.environ['NO_PROXY'] = 'recursoazureopenaimupi.openai.azure.com'
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))
from consumos.consulta_ia_openai import Consulta_ia_openai

# === Configuraciones ===
PRIORIDAD = ['ERROR', 'WARN', 'INFO', 'DEBUG', 'UNKNOWN']

CATEGORIAS = {
    'start_send': re.compile(r'inicia envio', re.IGNORECASE),
    'end_send': re.compile(r'fin envio', re.IGNORECASE),
    'ftp_error': re.compile(r'FTP.*ERROR', re.IGNORECASE),
    'general_error': re.compile(r'ERROR', re.IGNORECASE),
}

def es_inicio_log(linea: str) -> bool:
    return bool(re.match(r"\d{2}:\d{2}:\d{2},\d{3}", linea))

def extraer_componente(linea: str) -> str:
    match = re.search(r'\b(?:ERROR|WARN|INFO|DEBUG)\s+\[([^\]]+)\]', linea)
    return match.group(1).strip() if match else "desconocido"

def extraer_hilo(linea: str) -> str:
    match = re.search(r'\(([^)]+)\)', linea)
    return match.group(1).strip() if match else "main"

def extraer_nivel(linea: str) -> str:
    niveles = ['ERROR', 'WARN', 'INFO', 'DEBUG']
    for nivel in niveles:
        if f' {nivel} ' in linea:
            return nivel
    return 'UNKNOWN'

def categorizar_mensaje(texto: str) -> str:
    for categoria, patron in CATEGORIAS.items():
        if patron.search(texto):
            return categoria
    return 'otros'

def limitar_longitud(texto: str, max_len=30000):
    return texto if len(texto) <= max_len else texto[:max_len] + '...'

def prioridad_nivel(nivel):
    return PRIORIDAD.index(nivel) if nivel in PRIORIDAD else len(PRIORIDAD)

# === Filtro 1 ===
def extraer_bloques_log(input_path: str, output_path: str) -> None:
    with open(input_path, 'r', encoding='utf-8') as file_in, \
         open(output_path, 'w', encoding='utf-8') as file_out:
        
        bloque = []
        en_bloque = False
        numero_linea = 0
        linea_inicio = None

        for linea in file_in:
            numero_linea += 1
            if es_inicio_log(linea):
                if en_bloque:
                    file_out.write(f"# Bloque encontrado en la l√≠nea {linea_inicio}\n")
                    file_out.write("".join(bloque) + "\n\n")
                bloque = [linea]
                en_bloque = True
                linea_inicio = numero_linea
            elif en_bloque:
                if linea.startswith(("   ", "\t", "at ")):
                    bloque.append(linea)
                else:
                    file_out.write(f"# Bloque encontrado en la l√≠nea {linea_inicio}\n")
                    file_out.write("".join(bloque) + "\n\n")
                    en_bloque = False
                    bloque = []

        if en_bloque:
            file_out.write(f"# Bloque encontrado en la l√≠nea {linea_inicio}\n")
            file_out.write("".join(bloque) + "\n\n")

# === Filtro 2 ===
def generar_reporte_logs(input_path: str, output_path: str) -> None:
    reporte = defaultdict(lambda: {
        'count': 0,
        'lineas': [],
        'nivel': '',
        'categoria': '',
        'componente': '',
        'hilo': '',
        'mensaje': ''
    })

    with open(input_path, 'r', encoding='utf-8') as file:
        lineas = file.readlines()

        bloque_actual = []
        for i, linea in enumerate(lineas, 1):
            match = re.match(r'# Bloque encontrado en la l√≠nea (\d+)', linea.strip())
            if match:
                if bloque_actual:
                    procesar_bloque(bloque_actual, match.group(1), reporte)
                bloque_actual = []
            elif not linea.strip().startswith("#"):
                bloque_actual.append(linea)

        if bloque_actual:
            procesar_bloque(bloque_actual, str(len(lineas)), reporte)

    # Insertar en BD solo los logs agrupados del reporte final
    insertar_logs_a_bd(reporte)

    with open(output_path, 'w', encoding='utf-8') as file:
        for (_, _, _), datos in sorted(
            reporte.items(), 
            key=lambda x: (prioridad_nivel(x[1]['nivel']), -x[1]['count'])
        ):
            file.write(f"=== {datos['mensaje']} ===\n")
            file.write(f"Nivel: {datos['nivel']} | Categor√≠a: {datos['categoria']}\n")
            file.write(f"Componente: {datos['componente']} | Hilo: {datos['hilo']}\n")
            file.write(f"Total: {datos['count']} ocurrencias\n")
            file.write("\nL√≠neas:\n- " + ", ".join(datos['lineas']) + "\n\n")

# ... (todo el c√≥digo anterior se mantiene igual)

def insertar_logs_a_bd(reporte):
    """Inserta en la BD solo los logs agrupados del reporte final con OpenAI"""
    consulta = Consulta_ia_openai()
    
    for (nivel, categoria, _), datos in reporte.items():
        respuesta_openai = None
        
        # Solo consultamos a OpenAI para errores nuevos
        if nivel == 'ERROR':
            respuesta_openai = consulta.interpretar_logs(datos['mensaje'])
            print(f"üîç Soluci√≥n OpenAI para error: {respuesta_openai[:100]}...")  # Log parcial
            
        Logger.insertar_log(
            idEmpresa=1,
            operador=0,  # 0 para procesos autom√°ticos
            mensaje=limitar_longitud(datos['mensaje']),  # Solo el mensaje original
            nivel=nivel,
            componente=datos['componente'],
            hilo=datos['hilo'],
            categoria=categoria,
            estado='ACTIVO',
            lineas=datos['lineas'],  # Pasamos el array de l√≠neas por separado
            ocurrencias=datos['count'],  # Pasamos el total de ocurrencias
            respuestaOpenai=respuesta_openai  # Nuevo campo con la soluci√≥n
        )

def procesar_bloque(bloque_actual, linea_inicio, reporte):
    mensaje_completo = "".join(bloque_actual).strip()
    nivel = extraer_nivel(mensaje_completo)
    categoria = categorizar_mensaje(mensaje_completo)
    componente = extraer_componente(mensaje_completo)
    hilo = extraer_hilo(mensaje_completo)

    mensaje_normalizado = re.sub(r'\d{2}:\d{2}:\d{2},\d{3}.*?\]', '', mensaje_completo).strip()
    
    if "FTP MKDIR" in mensaje_normalizado:
        mensaje_normalizado = re.sub(r'FTP MKDIR.*?ERROR', 'FTP MKDIR [DIRECTORIO] ERROR', mensaje_normalizado)

    clave = (nivel, categoria, mensaje_normalizado)
    reporte[clave].update({
        'count': reporte[clave]['count'] + 1,
        'lineas': reporte[clave]['lineas'] + [linea_inicio],
        'nivel': nivel,
        'categoria': categoria,
        'componente': componente,
        'hilo': hilo,
        'mensaje': mensaje_completo
    })

# ----------------------------
# Ejecuci√≥n (Flujo principal)
# ----------------------------
if __name__ == "__main__":
    input_original = "C:/Users/klever.robalino/Desktop/Proyecto-Mutualista/backend-asistente/agentes/logs/logs_files/prueba.txt"
    output_filtro1 = "C:/Users/klever.robalino/Desktop/Proyecto-Mutualista/backend-asistente/agentes/logs/logs_files/filtro1_bloques.txt"
    output_filtro2 = "C:/Users/klever.robalino/Desktop/Proyecto-Mutualista/backend-asistente/agentes/logs/logs_files/filtro2_reporte.txt"

    extraer_bloques_log(input_original, output_filtro1)
    generar_reporte_logs(output_filtro1, output_filtro2)

    print("‚úÖ Proceso completo:")
    print(f"- Bloques de log extra√≠dos en: {output_filtro1}")
    print(f"- Reporte agrupado generado en: {output_filtro2}")
    print("- Todos los logs relevantes han sido insertados en la base de datos")


------------------archivo config--------------------------------------
from flask_sqlalchemy import SQLAlchemy
import os
import pymysql
import shutil


db = SQLAlchemy()



CERT_ORIGINAL_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'certs', 'ca-cert.pem')
#CERT_DEST_PATH = '/tmp/ca-cert.pem' if platform.system() != 'Windows' else 'C:\ASISTENTECEDI\backend\certs\ca-cert.pem'
#CERT_DEST_PATH = '/tmp/ca-cert.pem' if platform.system() != 'Windows' else os.path.join(os.getenv('TEMP'), 'ca-cert.pem')
CERT_DEST_PATH = os.path.join(os.getcwd(), 'ca-cert.pem')

try:
    if not os.path.exists(CERT_DEST_PATH):
        shutil.copy(CERT_ORIGINAL_PATH, CERT_DEST_PATH)
        print(f">><<Certificado copiado a: {CERT_DEST_PATH}")
    else:
        print(f">><<Certificado ya existe en: {CERT_DEST_PATH}")
except Exception as e:
    print(f">>>>>>Error al copiar el certificado: {e}")

# Configuraci√≥n base
class Config:
    SQLALCHEMY_TRACK_MODIFICATIONS = False

# Configuraci√≥n de desarrollo
class DevelopmentConfig(Config):
    SQLALCHEMY_DATABASE_URI = (
        'mysql+pymysql://administrador:Mupi2024+11@asistentebase.mysql.database.azure.com:3306/asistentedb'
    )
    SQLALCHEMY_ENGINE_OPTIONS = {
        'pool_recycle': 299,
        'pool_pre_ping': True,
        'connect_args': {
            'connect_timeout': 20,
            'ssl': {'ca': 'C:/ASISTENTECEDI/backend/certs/ca-cert.pem'}  # Ruta al certificado SSL corregida
        }
    }

# Configuraci√≥n de producci√≥n
class ProductionConfig(Config):

    print(f"ProductionConfig Certificado usado en>>>>>>>>>>>>>>>xxxxxxxxxxxxxx>>>>>>>>>>: {CERT_DEST_PATH}")
    if os.access(CERT_DEST_PATH, os.R_OK):
        print(f"El certificado existe y es accesible: {CERT_DEST_PATH}")
    else:
        print(f"El certificado existe, pero no se puede leer: {CERT_DEST_PATH}")


    DB_USER = os.getenv('DB_USER', 'administrador')
    DB_PASSWORD = os.getenv('DB_PASSWORD', 'Mupi2024+11')
    DB_HOST = os.getenv('DB_HOST', 'asistentebase.mysql.database.azure.com')
    DB_PORT = os.getenv('DB_PORT', '3306')
    DB_NAME = os.getenv('DB_NAME', 'asistentedb')
    DB_SSL_CA = os.getenv('DB_SSL_CA', '/tmp/ca-cert.pem')

    SQLALCHEMY_DATABASE_URI = (
        f'mysql+pymysql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}?ssl_ca={DB_SSL_CA}'
    )
    SQLALCHEMY_ENGINE_OPTIONS = {
        'pool_recycle': 299,
        'pool_pre_ping': True,
        'connect_args': {
            'connect_timeout': 20,
            #'ssl': {'ca': DB_SSL_CA}
            'ssl': {'ca': CERT_DEST_PATH}
        }
    }

# Inicializaci√≥n de la aplicaci√≥n Flask
def init_app(app, environment='production'):
    if environment == 'development':
        app.config.from_object(DevelopmentConfig)
    else:
        app.config.from_object(ProductionConfig)
    db.init_app(app)




